{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Classification.ipynb","provenance":[],"authorship_tag":"ABX9TyNMlS+2e/Ksv6mkQZWSivwH"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"WOak3GlHGiH2","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1598887273210,"user_tz":180,"elapsed":1346,"user":{"displayName":"Fernando Bloedorn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhbGH_Up0OxmsnqbTxjnA1nFlHs2DtkImQgp16Te9Y=s64","userId":"01142022762056379367"}}},"source":["# Classificação com Tensorflow\n","# Classificação de flores - Setosa, Versicolor e Virginica\n","# importações\n","%tensorflow_version 2.x  \n","from __future__ import absolute_import, division, print_function, unicode_literals\n","import tensorflow as tf\n","import pandas as pd"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"lu1iW-CQHSx1","colab_type":"code","colab":{}},"source":["# Dataset\n","CSV_COLUMN_NAMES = ['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth', 'Species']\n","SPECIES = ['Setosa', 'Versicolor', 'Virginica']\n","train_path = tf.keras.utils.get_file(\"iris_training.csv\", \"https://storage.googleapis.com/download.tensorflow.org/data/iris_training.csv\")\n","test_path = tf.keras.utils.get_file(\"iris_test.csv\", \"https://storage.googleapis.com/download.tensorflow.org/data/iris_test.csv\")\n","train = pd.read_csv(train_path, names=CSV_COLUMN_NAMES, header=0)\n","test = pd.read_csv(test_path, names=CSV_COLUMN_NAMES, header=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JP-OPQumHibo","colab_type":"code","colab":{}},"source":["# Visualizando os dados\n","#train.head()\n","test.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4UkLmXzlIA9L","colab_type":"code","colab":{}},"source":["train_y = train.pop('Species')\n","test_y = test.pop('Species')\n","train.head() "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nOtkKIdpIF_K","colab_type":"code","colab":{}},"source":["train.shape "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KmBP8iCCINsX","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1598887627719,"user_tz":180,"elapsed":712,"user":{"displayName":"Fernando Bloedorn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhbGH_Up0OxmsnqbTxjnA1nFlHs2DtkImQgp16Te9Y=s64","userId":"01142022762056379367"}}},"source":["# Input Function\n","def input_fn(features, labels, training=True, batch_size=256):\n","    # Convert the inputs to a Dataset.\n","    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))\n","\n","    # Shuffle and repeat if you are in training mode.\n","    if training:\n","        dataset = dataset.shuffle(1000).repeat()\n","    \n","    return dataset.batch(batch_size)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"9cjl0cL1IgZ9","colab_type":"code","colab":{}},"source":["# Feature Columns\n","my_feature_columns = []\n","for key in train.keys():\n","    my_feature_columns.append(tf.feature_column.numeric_column(key=key))\n","print(my_feature_columns)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-8xqRBMKIrJ_","colab_type":"code","colab":{}},"source":["# Build a DNN (Deep Neural Network) with 2 hidden layers with 30 and 10 hidden nodes each.\n","# Two hidden layers of 30 and 10 nodes respectively.\n","# The model must choose between 3 classes.\n","classifier = tf.estimator.DNNClassifier(feature_columns=my_feature_columns, hidden_units=[30, 10], n_classes=3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c05t0xlOJG7f","colab_type":"code","colab":{}},"source":["# Training\n","# Lambda to avoid creating an inner function previously\n","classifier.train(input_fn=lambda: input_fn(train, train_y, training=True), steps=5000)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_gguTtbGJd-q","colab_type":"code","colab":{}},"source":["# Avaliação\n","eval_result = classifier.evaluate(input_fn=lambda: input_fn(test, test_y, training=False))\n","#print(eval_result)\n","print('\\nTest set accuracy: {accuracy:0.3f}\\n'.format(**eval_result))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aaDZJnpSKJ6l","colab_type":"code","colab":{}},"source":["# Função de predição\n","# Utilize esses exemplos para testar:\n","#               Setosa  | Versicolor | Virginica\n","# SepalLength |   5.1   |    5.9     |    6.9\n","# SepalWidth  |   3.3   |    3.0     |    3.1\n","# PetalLength |   1.7   |    4.2     |    5.4\n","# PetalWidth  |   0.5   |    1.5     |    2.1\n","\n","def input_fn(features, batch_size=256):\n","    # Convert the inputs to a Dataset without labels.\n","    return tf.data.Dataset.from_tensor_slices(dict(features)).batch(batch_size)\n","\n","features = ['SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth']\n","predict = {}\n","\n","print(\"Please type numeric values as prompted.\")\n","for feature in features:\n","  valid = True\n","  while valid: \n","    val = input(feature + \": \")\n","    if not val.isdigit(): valid = False\n","\n","  predict[feature] = [float(val)]\n","\n","predictions = classifier.predict(input_fn=lambda: input_fn(predict))\n","for pred_dict in predictions:\n","    class_id = pred_dict['class_ids'][0]\n","    probability = pred_dict['probabilities'][class_id]\n","\n","    print('Prediction is \"{}\" ({:.1f}%)'.format(\n","        SPECIES[class_id], 100 * probability))"],"execution_count":null,"outputs":[]}]}